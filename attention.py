import torch.nn as nn
import torch
import torch.nn.functional as F
import config

class Head(nn.Module):
    """One head of self attention"""
    def __init__(self, head_size : int, dropout : float = 0.1):
        super().__init__()
        self.key = nn.Linear(config.n_embed, self.head_size, bias=False)
        self.query = nn.Linear(config.n_embed, self.head_size, bias=False)
        self.value = nn.Linear(config.n_embed, self.head_size, bias=False)
        
        # Buffers are tensors that are part of the module's state, but are not considered model parameters.
        # This means they are not updated by the optimizer during training, but they are saved and loaded 
        # when the model is serialized or deserialized.
        self.register_buffer('tril', torch.tril(torch.ones(config.block_size, config.block_size)))
        self.dropout = nn.Dropout(dropout)
    def forward(self, x : torch.Tensor) -> torch.Tensor:
        # B = Batch 
        # T = Time
        # C = Channels or embeeding size
        B, T, C = x.shape
        #the initialization with zeros of weight matrix is not necessary. THse values represent the affinity
        #of each of the token with each other. The values of this wei matrix depends on the \
        #dataset. Self attention solves this initialization problem

        # -----SELF ATTENTION------#
        # We make three information vectors come out of each input, key, query and value. Key and query can be 
        # understood in the same sense as a youtube search task, where what we put in the search bar is the query
        # the information available with the platform is key and their dot product will tell you how mush similarity
        # present between the query and the key. 
        k = self.key(x)
        q = self.query(x)
        wei = (q @ k.transpose(-2, -1) * (C ** -0.5)) #(B, T, 16) @ (B, 16, T) -> (B, T, T)
        
        #this was initialization without self attention 
        #wei = torch.zeros((T, T))
        wei = wei.masked_fill(self.trail[:T, :T] == 0, float('-inf')) # (B , T, T)
        wei = F.softmax(wei, dim=1)
        wei = self.dropout(wei)

        #The value term is used to find the similarity between what is generated by the mechanism (wei) 
        #and what is expected based on the input.
        v = self.value(x)
        out = wei @ v
        return out

class MultiHeadAttention(nn.Module):
    """Multiple heads of self attention in parallel"""

    def __init__(self, num_heads : int, head_size : int):
        super().__init__()
        self.heads = nn.ModuleList([Head(head_size) for _ in range(num_heads)])

    def forward(self, x : torch.Tensor):
        return torch.cat([h(x) for h in self.heads], dim=-1)
    
class FeedForward(nn.Module):
    """
    A simple linear layer followed by relu non-linearity
    """
    def __init__(self, n_embed, dropout : float = 0.1):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(n_embed,4* n_embed),
            nn.ReLU(),
            nn.Linear(4 * n_embed, n_embed),
            nn.Dropout(dropout)
        )

    def forward(self, x : torch.Tensor):
        self.net(x)

class Block(nn.Module):
    """Transformer block: communication followed by computation"""

    def __init__(self, n_embed, n_head):
        # n_embed: embedding dimension of the characters
        # n_head: total number of heads we will like
        super().__init__()
        head_size = n_embed // n_head
        self.sa = MultiHeadAttention(n_head, head_size)
        self.ffwd = FeedForward(n_embed)
        self.ln1 = nn.LayerNorm(n_embed)
        self.ln2 = nn.LayerNorm(n_embed)
    def forward(self, x):

        # these are basically the residual connections. The multihead attention
        # is the main task that is performed and adding x to it is the work of
        # residual connection
        x = x + self.sa(self.ln1(x))
        x = x + self.ffwd(self.ln2(x))
        return x